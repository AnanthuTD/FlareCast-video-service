generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @map("_id") @db.ObjectId
  fullName   String
  image      String       @default("")
  Video      Video[]
  Views      Views[]
  WatchLater WatchLater[]
  Chat       Chat[]
}

model Video {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String?  @default("Untitled Video")
  description   String?  @default("No Summery")
  createdAt     DateTime @default(now())
  userId        String   @db.ObjectId
  totalViews    Int      @default(0)
  uniqueViews   Int      @default(0)
  transcription String?  @default("")
  duration      String   @default("0")
  folderId      String?  @db.ObjectId
  workspaceId   String   @db.ObjectId
  spaceId       String?  @db.ObjectId

  processing          Boolean     @default(true)
  transcodeStatus     VideoStatus @default(PENDING)
  uploaded            VideoStatus @default(PENDING)
  thumbnailStatus     VideoStatus @default(PENDING)
  transcriptionStatus VideoStatus @default(PENDING)
  titleStatus         VideoStatus @default(PENDING)
  descriptionStatus   VideoStatus @default(PENDING)

  User       User         @relation(fields: [userId], references: [id])
  Views      Views[]
  WatchLater WatchLater[]
  Chat       Chat[]
}

enum VideoStatus {
  SUCCESS
  FAILED
  PENDING
}

model Views {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId    String   @db.ObjectId
  userId     String   @db.ObjectId
  User       User     @relation(fields: [userId], references: [id])
  lastViewed DateTime @default(now())
  Video      Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

model WatchLater {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  User        User     @relation(fields: [userId], references: [id])
  workspaceId String   @unique @db.ObjectId
  videoIds    String[] @db.ObjectId
  videos      Video    @relation(fields: [videoIds], references: [id])

  @@unique([userId, workspaceId])
}

model Chat {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId     String   @db.ObjectId
  userId      String?  @db.ObjectId
  message     String
  repliedToId String?  @db.ObjectId
  createdAt   DateTime @unique @default(now())

  video     Video  @relation(fields: [videoId], references: [id])
  user      User?  @relation(fields: [userId], references: [id])
  repliedTo Chat?  @relation("ReplyTo", fields: [repliedToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Chat[] @relation("ReplyTo")

  sessionId String

  @@unique([createdAt, id])
  @@index([videoId, createdAt])
}
